import './App.css';
import React, { useEffect, useState, useRef } from 'react';

const uyirList = ["роЕ", "роЖ", "роЗ", "роИ", "роЙ", "роК", "роО", "роП", "роР", "роТ", "роУ", "роФ"];
const meiList = ["роХрпН", "роЪрпН", "роЯрпН", "родрпН", "рокрпН", "ро▒рпН", "роЮрпН", "роирпН", "роорпН", "ро╡рпН", "ро┤рпН", "ро│рпН", "ропрпН", "ро░рпН", "ро▓рпН"];

const uyirmeiMap = {
  "роХрпН": ["роХ", "роХро╛", "роХро┐", "роХрпА", "роХрпБ", "роХрпВ", "роХрпЖ", "роХрпЗ", "роХрпИ", "роХрпК", "роХрпЛ", "роХрпМ"],
  "роЪрпН": ["роЪ", "роЪро╛", "роЪро┐", "роЪрпА", "роЪрпБ", "роЪрпВ", "роЪрпЖ", "роЪрпЗ", "роЪрпИ", "роЪрпК", "роЪрпЛ", "роЪрпМ"],
  "роЯрпН": ["роЯ", "роЯро╛", "роЯро┐", "роЯрпА", "роЯрпБ", "роЯрпВ", "роЯрпЖ", "роЯрпЗ", "роЯрпИ", "роЯрпК", "роЯрпЛ", "роЯрпМ"],
  "родрпН": ["род", "родро╛", "родро┐", "родрпА", "родрпБ", "родрпВ", "родрпЖ", "родрпЗ", "родрпИ", "родрпК", "родрпЛ", "родрпМ"],
  "рокрпН": ["рок", "рокро╛", "рокро┐", "рокрпА", "рокрпБ", "рокрпВ", "рокрпЖ", "рокрпЗ", "рокрпИ", "рокрпК", "рокрпЛ", "рокрпМ"],
  "роорпН": ["роо", "рооро╛", "рооро┐", "роорпА", "роорпБ", "роорпВ", "роорпЖ", "роорпЗ", "роорпИ", "роорпК", "роорпЛ", "роорпМ"],
  "ропрпН": ["роп", "ропро╛", "ропро┐", "ропрпА", "ропрпБ", "ропрпВ", "ропрпЖ", "ропрпЗ", "ропрпИ", "ропрпК", "ропрпЛ", "ропрпМ"],
  "ро░рпН": ["ро░", "ро░ро╛", "ро░ро┐", "ро░рпА", "ро░рпБ", "ро░рпВ", "ро░рпЖ", "ро░рпЗ", "ро░рпИ", "ро░рпК", "ро░рпЛ", "ро░рпМ"],
  "ро▓рпН": ["ро▓", "ро▓ро╛", "ро▓ро┐", "ро▓рпА", "ро▓рпБ", "ро▓рпВ", "ро▓рпЖ", "ро▓рпЗ", "ро▓рпИ", "ро▓рпК", "ро▓рпЛ", "ро▓рпМ"],
  "ро╡рпН": ["ро╡", "ро╡ро╛", "ро╡ро┐", "ро╡рпА", "ро╡рпБ", "ро╡рпВ", "ро╡рпЖ", "ро╡рпЗ", "ро╡рпИ", "ро╡рпК", "ро╡рпЛ", "ро╡рпМ"],
  "ро┤рпН": ["ро┤", "ро┤ро╛", "ро┤ро┐", "ро┤рпА", "ро┤рпБ", "ро┤рпВ", "ро┤рпЖ", "ро┤рпЗ", "ро┤рпИ", "ро┤рпК", "ро┤рпЛ", "ро┤рпМ"],
  "ро│рпН": ["ро│", "ро│ро╛", "ро│ро┐", "ро│рпА", "ро│рпБ", "ро│рпВ", "ро│рпЖ", "ро│рпЗ", "ро│рпИ", "ро│рпК", "ро│рпЛ", "ро│рпМ"],
  "ро▒рпН": ["ро▒", "ро▒ро╛", "ро▒ро┐", "ро▒рпА", "ро▒рпБ", "ро▒рпВ", "ро▒рпЖ", "ро▒рпЗ", "ро▒рпИ", "ро▒рпК", "ро▒рпЛ", "ро▒рпМ"],
  "ройрпН": ["рой", "ройро╛", "ройро┐", "ройрпА", "ройрпБ", "ройрпВ", "ройрпЖ", "ройрпЗ", "ройрпИ", "ройрпК", "ройрпЛ", "ройрпМ"],
  "роЮрпН": ["роЮ", "роЮро╛", "роЮро┐", "роЮрпА", "роЮрпБ", "роЮрпВ", "роЮрпЖ", "роЮрпЗ", "роЮрпИ", "роЮрпК", "роЮрпЛ", "роЮрпМ"],
  "роЩрпН": ["роЩ", "роЩро╛", "роЩро┐", "роЩрпА", "роЩрпБ", "роЩрпВ", "роЩрпЖ", "роЩрпЗ", "роЩрпИ", "роЩрпК", "роЩрпЛ", "роЩрпМ"],
  "рогрпН": ["рог", "рогро╛", "рогро┐", "рогрпА", "рогрпБ", "рогрпВ", "рогрпЖ", "рогрпЗ", "рогрпИ", "рогрпК", "рогрпЛ", "рогрпМ"],
  "роирпН": ["рои", "роиро╛", "роиро┐", "роирпА", "роирпБ", "роирпВ", "роирпЖ", "роирпЗ", "роирпИ", "роирпК", "роирпЛ", "роирпМ"]
};

const keyStyle = {
  padding: "6px 10px",
  fontSize: "18px",
  cursor: "pointer",
  borderRadius: "6px",
  border: "1px solid #ccc",
  backgroundColor: "#f9f9f9",
  margin: "3px"
};

function App() {
  const [songs, setSongs] = useState([]);
  const [query, setQuery] = useState("");
  const [showKeyboard, setShowKeyboard] = useState(false);
  const [lastMei, setLastMei] = useState(null);
  const [expandedSongs, setExpandedSongs] = useState(new Set());
  const inputRef = useRef(null);

  useEffect(() => {
    fetch("/songs.json")
      .then(res => res.json())
      .then(data => setSongs(data));
  }, []);

  const handleMeiClick = (mei) => {
    setQuery(prev => prev + mei);
    setLastMei(mei);
    inputRef.current.focus();
  };

  const handleUyirClick = (uyir) => {
    if (lastMei && uyirmeiMap[lastMei]) {
      const idx = uyirList.indexOf(uyir);
      if (idx !== -1) {
        const combo = uyirmeiMap[lastMei][idx];
        setQuery(prev => prev.slice(0, prev.length - lastMei.length) + combo);
        setLastMei(null);
        inputRef.current.focus();
        return;
      }
    }
    setQuery(prev => prev + uyir);
    inputRef.current.focus();
  };

  const toggleVilakkam = (index) => {
    const newSet = new Set(expandedSongs);
    if (newSet.has(index)) {
      newSet.delete(index);
    } else {
      newSet.add(index);
    }
    setExpandedSongs(newSet);
  };

  const filteredByPadal = [];
  const filteredByVilakkam = [];

  songs.forEach((song, index) => {
    const padal = (song.padal || "").toLowerCase().replace(/\s/g, '');
    const vilakkam = (song.vilakkam || "").toLowerCase().replace(/\s/g, '');
    const q = query.toLowerCase().replace(/\s/g, '');

    if (q && padal.includes(q)) {
      filteredByPadal.push({ song, index });
    } else if (q && vilakkam.includes(q)) {
      filteredByVilakkam.push({ song, index });
    }
  });

  return (
    <div style={{ padding: "2rem", fontFamily: "Arial, sans-serif" }}>
      <h1>ЁЯУЪ родро┐ро░рпБроороирпНродро┐ро░роорпН родрпЗроЯро▓рпН</h1>

      <div style={{ position: "relative", width: "100%", maxWidth: "600px", marginBottom: "20px" }}>
        <input
          ref={inputRef}
          type="text"
          value={query}
          onClick={() => setShowKeyboard(true)}
          onChange={e => setQuery(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter') setShowKeyboard(false);
          }}
          placeholder="роЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН"
          style={{
            width: "100%",
            padding: "10px",
            fontSize: "16px"
          }}
        />

        {showKeyboard && (
          <div style={{
            position: "absolute",
            top: "100%",
            left: 0,
            marginTop: "10px",
            backgroundColor: "#fff",
            border: "1px solid #ccc",
            borderRadius: "10px",
            padding: "10px",
            boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
            zIndex: 1000,
            width: "100%"
          }}>
            <div style={{ marginBottom: "5px" }}><strong>роорпЖропрпН роОро┤рпБродрпНродрпБроХро│рпН</strong></div>
            <div style={{ display: "flex", flexWrap: "wrap" }}>
              {meiList.map((mei, idx) => (
                <button key={idx} onClick={() => handleMeiClick(mei)} style={keyStyle}>
                  {mei}
                </button>
              ))}
            </div>

            <div style={{ marginTop: "10px", marginBottom: "5px" }}><strong>роЙропро┐ро░рпН роОро┤рпБродрпНродрпБроХро│рпН</strong></div>
            <div style={{ display: "flex", flexWrap: "wrap" }}>
              {uyirList.map((uyir, idx) => (
                <button key={idx} onClick={() => handleUyirClick(uyir)} style={keyStyle}>
                  {uyir}
                </button>
              ))}
            </div>

            <div style={{ marginTop: "10px" }}>
              <button onClick={() => setQuery("")} style={{ ...keyStyle, backgroundColor: "#ffecec" }}>ЁЯз╣ Clear</button>
              <button onClick={() => setShowKeyboard(false)} style={{ ...keyStyle, backgroundColor: "#eee" }}>тЭМ Close</button>
            </div>
          </div>
        )}
      </div>

      {query.trim() !== "" && (
  <>
    {/* ЁЯО╡ Matches in Padal Section */}
    <h3>ЁЯО╡ рокро╛роЯро▓ро┐ро▓рпН роЙро│рпНро│ро╡рпИ</h3>
    {filteredByPadal.length === 0 && <p>ЁЯФН рокрпКро░рпБродрпНродрооро╛рой рокро╛роЯро▓рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ</p>}
    {filteredByPadal.map(({ song, index }) => (
      <div key={`padal-${index}`}>
        <div
          onClick={() => toggleVilakkam(`padal-${index}`)}
          style={{
            display: "inline-block",
            margin: "10px",
            padding: "10px 20px",
            border: "2px solid #3f51b5",
            borderRadius: "50px",
            background: "#e8eaf6",
            cursor: "pointer",
            fontWeight: "bold"
          }}
        >
          рокро╛роЯро▓рпН {song.song_number}
        </div>

        {/* Show Padal */}
        {expandedSongs.has(`padal-${index}`) && (
          <div
            onClick={() => toggleVilakkam(`padal-line-${index}`)}
            style={{
              margin: "10px 20px",
              padding: "10px",
              background: "#fff",
              borderLeft: "3px solid #3f51b5",
              cursor: "pointer"
            }}
          >
            <p>{song.padal}</p>

            {/* Show Vilakkam if expanded */}
            {expandedSongs.has(`padal-line-${index}`) && (
              <p style={{ marginTop: "10px", backgroundColor: "#fff8e1", padding: "10px" }}>
                <strong>ро╡ро┐ро│роХрпНроХроорпН:</strong><br />{song.vilakkam}
              </p>
            )}
          </div>
        )}
      </div>
    ))}

    {/* ЁЯУЬ Matches in Vilakkam Section */}
    <h3 style={{ marginTop: "30px" }}>ЁЯУЬ ро╡ро┐ро│роХрпНроХродрпНродро┐ро▓рпН роЙро│рпНро│ро╡рпИ</h3>
    {filteredByVilakkam.length === 0 && <p>ЁЯФН рокрпКро░рпБродрпНродрооро╛рой ро╡ро┐ро│роХрпНроХроорпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ</p>}
    {filteredByVilakkam.map(({ song, index }) => (
      <div key={`vilakkam-${index}`}>
        <div
          onClick={() => toggleVilakkam(`vilakkam-${index}`)}
          style={{
            display: "inline-block",
            margin: "10px",
            padding: "10px 20px",
            border: "2px solid #ff9800",
            borderRadius: "50px",
            background: "#fff3e0",
            cursor: "pointer",
            fontWeight: "bold"
          }}
        >
          рокро╛роЯро▓рпН {song.song_number}
        </div>

        {/* Show Padal */}
        {expandedSongs.has(`vilakkam-${index}`) && (
          <div
            onClick={() => toggleVilakkam(`vilakkam-line-${index}`)}
            style={{
              margin: "10px 20px",
              padding: "10px",
              background: "#fff",
              borderLeft: "3px solid #ff9800",
              cursor: "pointer"
            }}
          >
            <p>{song.padal}</p>

            {/* Show Vilakkam if expanded */}
            {expandedSongs.has(`vilakkam-line-${index}`) && (
              <p style={{ marginTop: "10px", backgroundColor: "#fffde7", padding: "10px" }}>
                <strong>ро╡ро┐ро│роХрпНроХроорпН:</strong><br />{song.vilakkam}
              </p>
            )}
          </div>
        )}
      </div>
    ))}
  </>
)}

    </div>
  );
}

export default App;
